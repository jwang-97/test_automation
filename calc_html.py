import sys
import os
import time
#import urllib2
import json

from jinja2 import Template

# from classname import libsummary,nosummarycase,newtask,case,core,errorstr,diffcase,DateParser,readautocase,dataobject,subtask
from classname import libsummary,nosummarycase,case_cls,core,errorstr,diffcase,DateParser

class LibCalcJob:
    def __init__(self, track_number, benchmark):
        self.track_number = track_number
        self.benchmark = benchmark

# autotestbackuppath="/lbjfs2/qa/testing_results/auto_test/"
s = 'diff-result'
def search(path, s):
    pathlist = []
    pathlist = []
    for x in os.listdir(path):
        fp = os.path.join(path, x)
        if os.path.isfile(fp) and s in x:
            pathlist.append(fp)
    return pathlist

def readcasecost(filepath):
    try:
        file = open(filepath)
        lines=file.readlines()
        file.close()
    except:
        taskcase=''
        return taskcase
    for line in lines:
        linesplit = line.split(' ')
        if(len(linesplit)<2):
            continue;
        # print(linesplit)
        if "<1CPU-cases>" in line:
            cpu1_number = linesplit[1].strip()
        if "<1CPU-changetime-cases>" in line:
            cpu1_changetime = linesplit[1].strip()
        if "<1CPU-restart-cases>" in line:
            cpu1_restart = linesplit[1].strip()
        if "<1CPU-cost>" in line:
            cpu1_cost = linesplit[1].strip()
        if "<4CPU-cases>" in line:
            cpu4_number = linesplit[1].strip()
        if "<4CPU-changetime-cases>" in line:
            cpu4_changetime = linesplit[1].strip()
        if "<4CPU-restart-cases>" in line:
            cpu4_restart = linesplit[1].strip()
        if "<4CPU-cost>" in line:
            cpu4_cost = linesplit[1].strip()
        if "<4CPUCheck1-cases>" in line:
            cpu4check1_number = linesplit[1].strip()
        if "<4CPUCheck1-changetime-cases>" in line:
            cpu4check1_changetime = linesplit[1].strip()
        if "<4CPUCheck1-restart-cases>" in line:
            cpu4check1_restart = linesplit[1].strip()
        if "<4CPUCheck1-cost>" in line:
            cpu4check1_cost = linesplit[1].strip()
        if "<CASES>" in line:
            total_case = linesplit[1].strip()
        if "<Changetime-cases>" in line:
            total_changetime = linesplit[1].strip()
        if "<Restart-cases>" in line:
            total_restart = linesplit[1].strip()
        if "<COST>" in line:
            total_cost = linesplit[1].strip()

    taskcase=case_cls(cpu1_number, cpu1_changetime, cpu1_restart,cpu1_cost,cpu4_number,
                 cpu4_changetime, cpu4_restart,cpu4_cost,cpu4check1_number, cpu4check1_changetime, cpu4check1_restart,cpu4check1_cost,
                  total_case,total_changetime,total_restart,total_cost)
    return taskcase

def readcorelist(file):
    corefile=open(file)
    lines=corefile.readlines()
    corefile.close()

    corelist=[]
    onecore=[]

    for line in lines:
        if "gdb " in line:
            for machineline in onecore:
                if "on linux" in machineline:
                    corelist.append(onecore)
                    onecore=[]
        onecore.append(line.strip())
    corelist.append(onecore)

    coreclasslist=[]

    for acore in corelist:
        corecaselist=[]
        for coreline in acore:
            if "gdb " in coreline:
                # print(coreline)
                linesplit = coreline.split(' ')
                if len(linesplit) > 3:
                    corecase=linesplit[3].strip()
                else:
                    corecase =linesplit[1].strip()
            if "#" in coreline:
                if not "/lib64/" in line:
                    linesplit = coreline.split(' in ')
                    corefunctionoriginal = linesplit[1].strip().split('from')
                    corefunction=corefunctionoriginal[0].strip()
                    break
            if 'Core was generated by `' in coreline:
                linesplit = coreline.split('Core was generated by `')
                coreexeoriginal=linesplit[1].strip().split(' ')
                coreexe=coreexeoriginal[0]

            if 'on linux' in coreline:
                linesplit = coreline.split(' ')
                coremachine=linesplit[1].strip()

        corecaseinfo = corecase + " on " + coremachine
        coreclass=core(corecaseinfo,corefunction,coreexe,acore)
        coreclasslist.append(coreclass)
    return  coreclasslist

def parsecorelist(file):
    corelist=readcorelist(file)
    corefunctionlist=[]
    for acore in corelist:
        corefunctionlist.append(acore.corefunction)
    finalfunctionlist=[]
    for function in corefunctionlist:
        if function not in finalfunctionlist:
            finalfunctionlist.append(function)
    newcorelist=[]

    for singalfunction in finalfunctionlist:
        singalcorecase=[]
        for onecore in corelist:

            if onecore.corefunction == singalfunction:
                singalcorecase.append(onecore.corecase)
        newcore=core(singalcorecase,singalfunction,onecore.coreexe,onecore.coreinfo)
        newcorelist.append(newcore)
    return  newcorelist

def readdiff(benchmarkpath,ignorestr):
    benchmarkdiff = search(benchmarkpath, s)
    difflists=[]
    for diffben in benchmarkdiff:
        if ignorestr.strip() :
            if ignorestr in diffben:
                 break
            else:
                diffresult=[]
                diffstr = []
                f = open(diffben)
                diffstr = f.readlines()
                f.close()
                for oneStr in diffstr:
                    if "kompare" in oneStr:
                    
                        oneStrList = oneStr.strip().split(' ')
 
                        oneStrSplittracknumber = oneStrList[1].split(track_number)
                        diffresult.append(oneStrSplittracknumber[1].strip() )
        
                difflist = diffcase(diffben, diffresult)
                difflists.append(difflist)

        else:
            diffstr = []
            diffresult=[]
            f = open(diffben)
            diffstr = f.readlines()
            f.close()
            for oneStr in diffstr:
                if "kompare" in oneStr:                    
                    oneStrList = oneStr.strip().split(' ')    
                    oneStrSplittracknumber=oneStrList[1].split(track_number)
                    diffresult.append(oneStrSplittracknumber[1].strip() )
            difflist = diffcase(diffben, diffresult)
            difflists.append(difflist)
    return difflists

def readpiclack(path):
    piclackkey = "_PicAndDataDiffResult.txt"
    piclackfiles = search(path, piclackkey)
    piclists=[]
    for piclackfile in piclackfiles:
        fileopen = open(piclackfile)
        piclacklist = fileopen.readlines()
        for line in piclacklist:
            if "#" in line:
                continue
            else:
                piclists.append(line.strip() )
        fileopen.close()
    return piclists


def readnosummary(filepath):
    nosummarykey = "_NoSummary"
    nosummaryfiles = search(filepath, nosummarykey)
    count=len(nosummaryfiles)
    nosummarycases=[]
    if len(nosummaryfiles) > 0:
        for nosummaryfile in nosummaryfiles:
            fileopen = open(nosummaryfile)
            nosummarylist=fileopen.readlines()
            fileopen.close()
            nosummary = nosummarycase(nosummaryfile, nosummarylist)
            nosummarycases.append(nosummary)
    return nosummarycases

predefinederrorstr=['Error: Ux of last point is larger than','Error: g_autocase_formspec->read(IAR_spec.ac) failed','not found in iDEAS;'
                    ,'Error in fnisospire()!','Calc Failed, Have No Summary','ERROR in *: open * file * failed !']

def readerrormessage(file):
    errorfile=open(file)
    lines=errorfile.readlines()
    errorfile.close()
    errormessages = []
    for line in lines:
        caseinline=line.split(':')
        casewitherror=caseinline[1].split('(')
        totalerrormessage = line
        casename=casewitherror[0]

        for str in predefinederrorstr:
            if '*' in str:
                strsplit = str.split('*')
                inline=1
                for basicstr in strsplit:
                    if basicstr in line:
                        inline=1
                    else:
                        inline = 0
                if inline == 1:
                    errormessage = errorstr(str,totalerrormessage,casename)
                    errormessages.append(errormessage)

            else:
                if str in line:
                   errormessage = errorstr(str,totalerrormessage, casename)
                   errormessages.append(errormessage)

    errorfunctions = []
    for errormessage in errormessages:
        if errormessage.errorfunctionname not in errorfunctions:
            errorfunctions.append(errormessage.errorfunctionname)

    finalerrorlist=[]
    for errorfunction in errorfunctions:
        errorcaselist=[]
        totalerrorlist=[]
        for errormessage in errormessages:
            if errormessage.errorfunctionname == errorfunction:
                errorcaselist.append(errormessage.errorcase)
                totalerrorlist.append(errormessage.totalerrorname)
        finalerror=errorstr(errorfunction,totalerrorlist,errorcaselist)
        finalerrorlist.append(finalerror)

    return finalerrorlist

def readcheckautocasediff(diff):
    autocasediff = search(diff,'diff_file_benchmark')
    f= open(autocasediff[0])
    lines=f.readlines()
    f.close()
    finaldiff=[]

    difflist = []
    onediff = []
    nofile=[]

    for line in lines:
        if "diff -r" in line:
            if len(onediff) > 0:
                difflist.append(onediff)
                onediff = []
        if "Only in" in line:
            nofile.append(line)
            continue
        onediff.append(line)
    difflist.append(onediff)

    for diff in difflist:
        current=[]
        benchmark=[]
        for diffline in diff:
            if '<' in diffline:
                current.append(diffline)
            if '>' in diffline:
                benchmark.append(diffline)
        if len(current) == 1 and len(benchmark) == 1 and '<' in current:
           currentsplits=current.split('<')
           currentdate=currentsplits[1].strip()

           benchmarksplits=benchmark.split('>')
           benchmarkdate=benchmarksplits[1].strip()
           if '"Value":' in currentdate:
               currentdatesplit = currentdate.split('"Value":')
               currentdate=currentdatesplit[1].strip()
           if '"Version":' in currentdate:
               currentdatesplit = currentdate.split('"Version":')
               currentdate=currentdatesplit[1].strip()
           if '"Value":' in benchmarkdate:
               benchmarkdatesplit = benchmarkdate.split('"Value":')
               benchmarkdate=benchmarkdatesplit[1].strip()
           if '"Version":' in benchmarkdate:
               benchmarkdatesplit = benchmarkdate.split('"Version":')
               benchmarkdate=benchmarkdatesplit[1].strip()

           curdate,curflag =  DateParser().parse(currentdate)
           benchdate,benflag = DateParser().parse(benchmarkdate)

           if curflag == [True, True, True] and benflag == [True, True, True]:
               continue
           else:
               finaldiff.append(diff)
        else:
            finaldiff.append(diff)
    return finaldiff




if __name__ == '__main__':
    path_calcjob = sys.argv[1]
    path_bm = sys.argv[2]
    track_number = path_calcjob.split("/")[-1]
    if track_number == "":
        track_number = path_calcjob.split("/")[-2]
    bm = path_bm.split("/")[-1]
    if bm == "":
        bm = path_bm.split("/")[-2]
    print(track_number, bm)
    calcjob = LibCalcJob(track_number, bm)

    job_bm_path = path_calcjob +os.path.sep +'result-diff' + os.path.sep + calcjob.benchmark
    job_diffself_path = path_calcjob +os.path.sep + 'result-diff' + os.path.sep + calcjob.track_number
    job_case_cost_path = job_diffself_path + os.path.sep + 'case_cost.txt'
    bm_case_cost_path = job_bm_path + os.path.sep + 'case_cost.txt'
    
    if os.path.isfile(job_case_cost_path):
        taskcase=readcasecost(job_case_cost_path)
    else:
        taskcase=""
    if os.path.isfile(bm_case_cost_path):
        benchmarkcase=readcasecost(bm_case_cost_path)
    else:
        benchmarkcase=[]
    #find the no summary case
    if os.path.exists(job_diffself_path):
        nosummary=readnosummary(job_diffself_path)
        nosummarynumber = 0
        for anycase in nosummary:
            nosummarynumber += len(anycase.nosummarycase)
    else:
        nosummary=[]
        nosummarynumber=0
    
    corefile = path_calcjob + os.path.sep + 'core.list'
    if os.path.isfile(corefile):
        corelist=parsecorelist(corefile)
    else:
        corelist=[]
    
    errorfile = path_calcjob + os.path.sep + 'itesting_errlog.txt'
    if os.path.isfile(errorfile):
        errorstrs = readerrormessage(errorfile)
    else:
        errorstrs = []
    
    if os.path.exists(job_bm_path):
        nopicture = readpiclack(job_bm_path)
        difflist=readdiff(job_bm_path,'-diffself')
    else:
        difflist=[]
        nopicture=[]
    if os.path.exists(job_diffself_path):
        diffselflist=readdiff(job_diffself_path,'')
    else:
        diffselflist=[]
      
    libsum = libsummary(len(corelist), len(errorstrs), nosummarynumber,0)
    
    t= open("cis/libcalc/calc_rt.html")
    calc_rt=t.read()
    t.close()
    
    f = Template(calc_rt)

    if taskcase != "":
        # debug
        # print('calcjob', calcjob.__dict__)
        # print('taskcase', taskcase.__dict__)
        # print('benchmarkcase', benchmarkcase.__dict__ )
        # print('nopicture', len(nopicture) )
        # print('corelist', len(corelist) )
        # print('nosummary', len(nosummary) )
        # print('libsum',libsum.__dict__)
        # print('errorstrs', len(errorstrs))
        # print('difflist', len(difflist))
        # print('diffselflist', len(diffselflist) )
        reportstr=f.render(calcjob=calcjob, taskcase=taskcase, benchmarkcase=benchmarkcase,nopicture=nopicture,corelist=corelist,
                           nosummary=nosummary,libsum=libsum,errorstrs=errorstrs, difflist=difflist, diffselflist=diffselflist)
    
        finalreportpath = path_calcjob + os.path.sep +"calc_report.html"
        finalreport = open(finalreportpath,'w')
        finalreport.write(reportstr)
        finalreport.close()
        print("find report calc_report.html @ " + path_calcjob )
        if(libsum.libcore!=0 or libsum.libabnormal!=0 or libsum.libnofile!=0 or len(difflist)+len(diffselflist)!=0 ):
            print('mismatches found in this libcalc')
            sys.exit(1)
    else:
        print("please compare first")

        sys.exit(1)
